package Server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.sql.Connection;
import java.sql.ResultSet;

import javax.net.ssl.SSLSocket;

import utility.Utility;
import utility.ComMsg;

/**
 * Diese Klasse verarbeitet die Kommunikation mit (je) einem Client
 * 
 * @author Marius Kleiner, Dirk Kleiner
 * @version 0.1a
 *
 */
public class ServerInstance implements Runnable{

	// Klassenvariablen
	SSLSocket sslsocket = null;
	InputStream inputstream = null;
	ObjectInputStream objInStream = null;
	// SQL
	Connection sqlConnection = null;
	static java.sql.Statement sqlStatement = null;	// Enthält SQL Anfragestatements
	static ResultSet sqlResult = null;		// Enthält SQL Anfrageergebnisse
	// Authentifizierung
	boolean authentication = false;
	
	/**
	 * Konstruktor
	 * @param sslsocket 
	 * @param sqlConnection 
	 * 
	 */
	public ServerInstance(SSLSocket sslsocket, Connection sqlConnection) {
		this.sslsocket = sslsocket;
		this.sqlConnection = sqlConnection;
		//
		try {
			inputstream = sslsocket.getInputStream();
			objInStream = new ObjectInputStream(inputstream);
		} catch (IOException e) {
			Utility.errorMsg("Failed to create inputStream", e);
		}
	}
	
	/**
	 * Runnable
	 */
	public void run() {
		Object inObject = null;
		// Warte auf eingehende Nachrichten (loop 4ever)
        try {
        	// Lese eine Zeile, bis es nichts mehr zu lesen gibt....
			while ((inObject = objInStream.readObject()) != null) {
				// Interpretiere erhaltene Nachricht
				parseMsg(inObject);
			}
		} catch (IOException | ClassNotFoundException e) {
			// Fehler während aus bufferedReader gelesen wird, oder (wahscheinlicher)
			// Verbindungsabbruch
			Utility.debugMsg("Error while using bufferedReader or disconnected");
		}finally{
			// Release alle gebundenen Ressourcen
			try {
				objInStream.close();
			} catch (IOException e) {
				objInStream = null;
			}
			try {
				inputstream.close();
			} catch (IOException e) {
				inputstream = null;
			}
		}
        
	}

	/**
	 * Verarbeite eingegangene Nachricht
	 * @param inObject
	 */
	private void parseMsg(Object obj) {
		// Prüfe Objekttyp und verfahre dementsprechend
		if (obj instanceof utility.ComMsg) {
			try {
				// Caste zu einer comMsg
				ComMsg msg = (ComMsg) obj;
				// Prüfe Art der Nachricht
				if (msg.getType().equals(ComMsg.com_authentication_request)) {
					checkAuthentication(msg.getMsg());
				}
			} catch (Exception e) {
				Utility.errorMsg("Broken MessageObjekt: " + e, e);
			}
		}else{
			Utility.debugMsg("Received unknown MessageObject");
		}
		
	}

	/**
	 * Prüfe Logindaten
	 * @param string 
	 * @throws Exception 
	 */
	private void checkAuthentication(String string) throws Exception {
		// String verarbeiten
		String[] stringArray = string.split("\\|");
		if (stringArray.length == 2) {
			String login = stringArray[0];
			String passwort = stringArray[1];
			// Prüfe logindaten in der SQL Datenbank
			sqlRequest();
		}else{
			throw new Exception("Received login message is corrupt");
		}
		
	}
	
	/**
	 * Führe eine Anfrage an die SQL Datenbank aus
	 */
	public static void sqlRequest() {
		
	}

}
