package states;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.swing.JPanel;

import Client.Client;

import utility.ComMsg;
import utility.Utility;

/**
 * Diese Klasse repräsentiert den Zustand des Programms während dem Einloggen
 * 
 * @author Marius Kleiner, Dirk Kleiner
 * @version 0.1a
 *
 */
public class LoginState implements Runnable{
	
	// Klassenvariablen
	private ObjectOutputStream objOutStream = null;
	private ObjectInputStream objInStream = null;

	/**
	 * Konstruktor
	 * @param objOutStream
	 * @param objInStream
	 */
	public LoginState(ObjectOutputStream objOutStream, ObjectInputStream objInStream) {
		// Setze Variablen
		this.objInStream = objInStream;
		this.objOutStream = objOutStream;
	}
	
	/**
	 * Führe eine LoginAnfrage durch
	 */
	public boolean doLoginRequest(String login, String pw) {
		try {
			ComMsg loginMsg = new ComMsg(ComMsg.com_authentication_request, login + "|" + pw);
			Utility.debugMsg("Sending authentication login data...");
			objOutStream.writeObject(loginMsg);
			return true;
		} catch (IOException e) {
			Utility.errorMsg("Couldn't connect to Server", e);
		}
		return false;
	}

	/**
	 * Höre auf Antwort(en)
	 */
	public void run() {
		Object inObject = null;
		// Warte auf eingehende Nachrichten (loop 4ever)
        try {
        	// Lese eine Zeile, bis es nichts mehr zu lesen gibt....
			while ((inObject = objInStream.readObject()) != null) {
				// Interpretiere erhaltene Nachricht
				Utility.debugMsg("Receiving MessageObject");
				//parseMsg(inObject);
			}
		} catch (IOException | ClassNotFoundException e) {
			// Fehler während aus bufferedReader gelesen wird, oder (wahscheinlicher)
			// Verbindungsabbruch
			Utility.debugMsg("Client disconnected");
			Client.closeClient();
		}
	}

}
