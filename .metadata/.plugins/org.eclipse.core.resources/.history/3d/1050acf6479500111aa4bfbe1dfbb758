package de.ipvs.RNI.uebung2;

import java.util.BitSet;


public class Bitstring {
	BitSet data;
	boolean isData = true;
	
	// Generatorpolynom
	BitSet generatorpolynom = new BitSet(13);
	
	public Bitstring(BitSet data) {
		this.data = data;
		
		// Create Generatorpolynom CRC12
		generatorpolynom.set(0,4,true);
		generatorpolynom.set(11,13,true);
	}
	
	// TODO: add constructor 
	// public BitString(BitSet data, boolean isData, byte seqNum)
	// you might find the Tools class helpful for converting between byte and bitSet
	
	
	/**
	 * 
	 * @return bistring as bitset, including type, seq num, data, CRC
	 */
	public BitSet getRawData() {
		return data;
	}
	
	
	/**
	 * returns type of Package (data or ack)
	 */
	public boolean isData() {
		// TODO: extract type of frame here
		return isData;
	}
	
	/**
	 * 
	 * @param data
	 * @return seq number from package header
	 */
	public byte getSeqNumber() {
		// TODO: extract sequence number from bitstring here
		return 0;
	}
	
	
	/**
	 * 
	 * @return data stripped from header
	 */
	public BitSet getData() {
		// TODO: extract data bits from bitstring  here
		return null;
	}
	
	/**
	 * Shift a bit Set left for n bits
	 * @param n
	 */
	public BitSet leftShiftBitSet (BitSet data, int n) {
		BitSet returnData = new BitSet(data.length()-1 + n);
		for (int x = 0; x < data.length(); x++){
			if (data.get(x) == true) {
				returnData.set(x+n,true);
			}
		}
		return returnData;
	}
	
	/**
	 * 
	 */
	public BitSet polynomdivision(BitSet data, BitSet generatorpolynom) {
		int stelle = data.length()-1;
		BitSet temp = new BitSet(generatorpolynom.length());
		//for (int x = 0; x < generatorpolynom.length(); x++) {
			temp = data.get(stelle - generatorpolynom.length() + 1, stelle);
			temp.xor(generatorpolynom);
			System.out.println("TEMP = " + temp);
		//}
		
		
		return generatorpolynom;
		
	}
	
	public void addCRC() {
		// Polynomdivision
		
		System.out.println("Generatorpolynom =              " + generatorpolynom);
		System.out.println("Generatorpolynom shift left 4 = " + leftShiftBitSet(generatorpolynom,4));
		
		
		BitSet testpoly = new BitSet(19);
		testpoly.set(0,1,true);
		testpoly.set(4,6,true);
		testpoly.set(11,16,true);
		testpoly.set(18,19,true);
		System.out.println("TEST = " + testpoly);
		polynomdivision(testpoly, generatorpolynom);
		
		
		data = leftShiftBitSet(data, this.generatorpolynom.length()-1);
		// TODO implement adding of CRC checksum here
	}
	
	public boolean checkCRC() {
		// TODO implement CRC checking here
		return true;
	}
	
}
